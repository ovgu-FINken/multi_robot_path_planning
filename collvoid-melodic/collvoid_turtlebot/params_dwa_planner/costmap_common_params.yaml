##### robot's footprint
footprint: [[-0.105, -0.08], [-0.105, 0.08], [0.041, 0.105], [0.041, -0.105]]
robot_radius: 0.105
footprint_padding: 0.0

plugins:
  - { name: static_layer, type: "costmap_2d::StaticLayer" }
  - { name: obstacle_layer, type: "costmap_2d::VoxelLayer" }
  # - { name: stationary_robots, type: "costmap_2d::ObstacleLayer" }
  - { name: inflation_layer, type: "costmap_2d::InflationLayer" }
  
## layer for static obstacles (derived from map published by map server)
# http://wiki.ros.org/costmap_2d/hydro/staticmap
static_layer:
  enabled: true
  map_topic: /map

## layer for dynamic obstacles (derived from scan data)
# http://wiki.ros.org/costmap_2d/hydro/obstacles
obstacle_layer:
  enabled: true
  max_obstacle_height: 2.0
  origin_z: 0
  z_resolution: 2
  z_voxels: 1
  unknown_threshold: 15
  mark_threshold: 0
  combination_method: 1
  track_unknown_space: true
  obstacle_range: 3.0 
  raytrace_range: 3.5 
  publish_voxel_map: true
  observation_sources: scan
  # specify scan source
  scan:
    sensor_frame: base_scan
    data_type: LaserScan
    topic: scan
    marking: true
    clearing: true
    min_obstacle_height: 0.0
    max_obstacle_height: 0.35

# stationary_robots:
#   enabled: true
#   max_obstacle_height:  2.0
#   obstacle_range: 2
#   raytrace_range: 4.0
#   publish_voxel_map: true

#   observation_sources: python_node python_node_clearing
#   python_node_clearing:
#     data_type: LaserScan
#     topic: clearing_scan
#     observation_persistence: 0.0
#     marking: false
#     clearing: true

#   python_node:
#     data_type: PointCloud2
#     topic: stationary_robots
#     observation_persistence: 0.0
#     marking: true
#     clearing: false


## layer for inflating the obstacles (as safety measure)
# http://wiki.ros.org/costmap_2d/hydro/inflation
inflation_layer:
  enabled: true
  cost_scaling_factor: 10.0 #exponential rate at which the obstacle cost drops off
  inflation_radius: 0.25