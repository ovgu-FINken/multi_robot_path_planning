DWAPlannerROS:
  # Robot Configuration Parameters
  max_vel_x: 0.25
  min_vel_x: -0.06

  max_vel_y: 0.0
  min_vel_y: 0.0

  # The velocity when robot is moving in a straight line
  max_vel_trans: 0.3
  min_vel_trans: 0.05

  max_vel_theta: 1.5 #2.75
  min_vel_theta: 0.2 #1.37

  acc_lim_x: 2.5
  acc_lim_y: 0.0
  acc_lim_theta: 3.2

  # Goal Tolerance Parametes
  xy_goal_tolerance: 0.08
  yaw_goal_tolerance: 0.5
  latch_xy_goal_tolerance: false

  # Forward Simulation Parameters
  sim_time: 1.5
  vx_samples: 20
  vy_samples: 0
  vth_samples: 40
  controller_frequency: 10.0

  # Trajectory Scoring Parameters
  path_distance_bias: 32.0
  goal_distance_bias: 20.0
  occdist_scale: 0.1
  forward_point_distance: 0.325
  stop_time_buffer: 0.2
  scaling_speed: 0.25
  max_scaling_factor: 0.2

  # Oscillation Prevention Parameters
  oscillation_reset_dist: 0.05

  # Debugging
  publish_traj_pc: true
  publish_cost_grid_pc: true
  
# DWAPlannerROS:
#   # Robot Configuration Parameters - Kobuki
#   max_vel_x: 0.5 # 0.55
#   min_vel_x: -0.1

#   max_vel_y: 0.0 # diff drive robot
#   min_vel_y: 0.0 # diff drive robot

#   max_vel_trans: 0.5 # choose slightly less than the base's capability
#   min_vel_trans: 0.05 # this is the min trans velocity when there is negligible rotational velocity
#   trans_stopped_vel: 0.05

#   # Warning!
#   #   do not set min_trans_vel to 0.0 otherwise dwa will always think translational velocities
#   #   are non-negligible and small in place rotational velocities will be created.

#   max_vel_theta: 1.5 # choose slightly less than the base's capability
#   min_vel_theta: 0.2 # this is the min angular velocity when there is negligible translational velocity
#   theta_stopped_vel: 0.1

#   acc_lim_x: 2.0 # maximum is theoretically 2.0, but we
#   acc_lim_theta: 5.0
#   acc_lim_y: 0.0 # diff drive robot

#   # Goal Tolerance Parameters
#   yaw_goal_tolerance: 0.3 # 0.05
#   xy_goal_tolerance: 0.15 # 0.10
#   # latch_xy_goal_tolerance: false

#   # Forward Simulation Parameters
#   sim_time: 1.2 # 1.7
#   vx_samples: 7 # 3
#   vy_samples: 1 # diff drive robot, there is only one sample
#   vtheta_samples: 20 # 20
#   prune_plan: true

#   # Trajectory Scoring Parameters
#   path_distance_bias: 24.0 # 32.0   - weighting for how much it should stick to the global path plan
#   goal_distance_bias: 32.0 # 24.0   - wighting for how much it should attempt to reach its goal
#   collvoid_scale: 48.0
#   occdist_scale: 0.05 # 0.01   - weighting for how much the controller should avoid obstacles
#   forward_point_distance: 0.1 # 0.325  - how far along to place an additional scoring point
#   stop_time_buffer: 0.2 # 0.2    - amount of time a robot must stop in before colliding for a valid traj.
#   scaling_speed: 0.25 # 0.25   - absolute velocity at which to start scaling the robot's footprint
#   max_scaling_factor: 0.2 # 0.2    - how much to scale the robot's footprint when at speed.

#   # Oscillation Prevention Parameters
#   oscillation_reset_dist: 0.15 # 0.05   - how far to travel before resetting oscillation flags

#   # Debugging
#   publish_traj_pc: true
#   publish_cost_grid_pc: true

#   global_frame_id: map

# CollvoidLocalPlanner:
#   # Robot Configuration Parameters - Kobuki
#   max_vel_x: 0.5 # 0.55
#   min_vel_x: -0.2

#   max_vel_y: 0.0 # diff drive robot
#   min_vel_y: 0.0 # diff drive robot

#   max_vel_trans: 0.5 # choose slightly less than the base's capability
#   min_vel_trans: 0.05 # this is the min trans velocity when there is negligible rotational velocity
#   trans_stopped_vel: 0.1

#   max_vel_theta: 1.5 # choose slightly less than the base's capability
#   min_vel_theta: 0.2 # this is the min angular velocity when there is negligible translational velocity
#   theta_stopped_vel: 0.4

#   acc_lim_x: 2.0 # maximum is theoretically 2.0, but we
#   acc_lim_theta: 5.0
#   acc_lim_y: 0.0 # diff drive robot

#   # Forward Simulation Parameters
#   sim_time: 1.2 # 1.7
#   sim_granularity: 0.04
#   angular_sim_granularity: 0.2

  # # Trajectory Scoring Parameters
  # path_distance_bias: 5.0 # 32.0   - weighting for how much it should stick to the global path plan
  # goal_distance_bias: 24.0 # 24.0   - wighting for how much it should attempt to reach its goal

#   occdist_scale: 0.05 # 0.01   - weighting for how much the controller should avoid obstacles
#   forward_point_distance: 0. # 0.325  - how far along to place an additional scoring point
#   stop_time_buffer: 0.2 # 0.2    - amount of time a robot must stop in before colliding for a valid traj.
#   scaling_speed: 0.25 # 0.25   - absolute velocity at which to start scaling the robot's footprint
#   max_scaling_factor: 0.2 # 0.2    - how much to scale the robot's footprint when at speed.

#   # Goal Tolerance Parameters
#   yaw_goal_tolerance: 0.3 # 0.05
#   xy_goal_tolerance: 0.15 # 0.10

#  holo_robot: false
#   wheel_base: 0.25
#   robot_radius: 0.106
# 
max_planning_retries: 5
controller_frequency: 10
#global_planner_frequency: 1
#shutdown_costmaps: true
# 
NavfnROS:
  default_tolerance: 0.3
# 
recovery_behaviors:
  - {
      name: conservative_reset,
      type: clear_costmap_recovery/ClearCostmapRecovery,
    }
  - { name: rotate_recovery, type: rotate_recovery/RotateRecovery }
  - {
      name: aggressive_reset,
      type: clear_costmap_recovery/ClearCostmapRecovery,
    }
  - { name: rotate, type: rotate_recovery/RotateRecovery }
  - {
      name: really_aggressive_reset,
      type: clear_costmap_recovery/ClearCostmapRecovery,
    }

conservative_reset:
  layer_names: ["obstacle_layer"]
  reset_distance: 2.0

aggressive_reset:
  layer_names: ["obstacle_layer"]
  reset_distance: 0.38

really_aggressive_reset:
  layer_names: ["obstacle_layer"]
  reset_distance: 0.25